// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/currency/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// UpdateCache mocks base method
func (m *MockRepository) UpdateCache() (map[string]float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCache")
	ret0, _ := ret[0].(map[string]float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCache indicates an expected call of UpdateCache
func (mr *MockRepositoryMockRecorder) UpdateCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCache", reflect.TypeOf((*MockRepository)(nil).UpdateCache))
}

// GetByCurrency mocks base method
func (m *MockRepository) GetByCurrency(currency string) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCurrency", currency)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCurrency indicates an expected call of GetByCurrency
func (mr *MockRepositoryMockRecorder) GetByCurrency(currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCurrency", reflect.TypeOf((*MockRepository)(nil).GetByCurrency), currency)
}
