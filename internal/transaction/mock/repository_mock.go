// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/transaction/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	model "github.com/KonstantinPronin/avito-unit-job-backend/internal/transaction/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockRepository) Add(tr *model.Transaction) (*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tr)
	ret0, _ := ret[0].(*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockRepositoryMockRecorder) Add(tr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRepository)(nil).Add), tr)
}

// Get mocks base method
func (m *MockRepository) Get(tid uint64) (*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tid)
	ret0, _ := ret[0].(*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(tid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), tid)
}

// GetOrderByDate mocks base method
func (m *MockRepository) GetOrderByDate(uid uint64, offset, limit uint, desc bool) (model.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByDate", uid, offset, limit, desc)
	ret0, _ := ret[0].(model.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByDate indicates an expected call of GetOrderByDate
func (mr *MockRepositoryMockRecorder) GetOrderByDate(uid, offset, limit, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByDate", reflect.TypeOf((*MockRepository)(nil).GetOrderByDate), uid, offset, limit, desc)
}

// GetOrderBySum mocks base method
func (m *MockRepository) GetOrderBySum(uid uint64, offset, limit uint, desc bool) (model.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderBySum", uid, offset, limit, desc)
	ret0, _ := ret[0].(model.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderBySum indicates an expected call of GetOrderBySum
func (mr *MockRepositoryMockRecorder) GetOrderBySum(uid, offset, limit, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderBySum", reflect.TypeOf((*MockRepository)(nil).GetOrderBySum), uid, offset, limit, desc)
}
